#!/usr/bin/python3

import amulet
import pika

d = amulet.Deployment()

d.add('rabbitmq-server', charm='cs:trusty/rabbitmq-server')
d.expose('rabbitmq-server')

# Don't forget to expose using d.expose(service)

try:
    # TODO(billy-olsen), juju test --timeout fails to pass the timeout values
    # into the environment and the charm isn't the best of places to select
    # a viable timeout since so muc is attributed to the environment anyways.
    # Need to fix this the right way, but for now we'll bump the timeout.
    d.setup(timeout=2700)
    d.sentry.wait()
except amulet.helpers.TimeoutError:
    amulet.raise_status(amulet.SKIP, msg="Environment wasn't stood up in time")
except:
    raise

server = d.sentry.unit['rabbitmq-server/0']
host = server.info['public-address']

# Connects without ssl
try:
    connection = pika.BlockingConnection(pika.ConnectionParameters(host=host,
                                                                   ssl=False))
except Exception as e:
    amulet.raise_status(
        amulet.FAIL,
        str(e)
    )

# Doesn't connect with ssl
try:
    connection = pika.BlockingConnection(pika.ConnectionParameters(host=host,
                                                                   ssl=True))
except Exception as e:
    pass
else:
    amulet.raise_status(
        amulet.FAIL,
        'SSL enabled when it shouldn\'t.'
    )

d.configure('rabbitmq-server', {
    'ssl': 'on'
})
d.sentry.wait()


# Connects without ssl
try:
    connection = pika.BlockingConnection(pika.ConnectionParameters(host=host,
                                                                   ssl=False))
except Exception as e:
    amulet.raise_status(
        amulet.FAIL,
        str(e)
    )

# Connects with ssl
try:
    connection = pika.BlockingConnection(pika.ConnectionParameters(host=host,
                                                                   ssl=True))
except Exception as e:
    amulet.raise_status(
        amulet.FAIL,
        str(e)
    )

d.configure('rabbitmq-server', {
    'ssl': 'only'
})
d.sentry.wait()


# Doesn't connect without ssl
try:
    connection = pika.BlockingConnection(pika.ConnectionParameters(host=host,
                                                                   ssl=False))
except Exception as e:
    pass
else:
    amulet.raise_status(
        amulet.FAIL,
        "Connects without SSL when it shouldn't"
    )

# Connects with ssl
try:
    connection = pika.BlockingConnection(pika.ConnectionParameters(host=host,
                                                                   ssl=True))
except Exception as e:
    amulet.raise_status(
        amulet.FAIL,
        str(e)
    )
